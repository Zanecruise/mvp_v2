from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Any

from pydantic import BaseModel, Field

from app.models.base import MongoBaseModel


class ProviderStatus(str, Enum):
    """Status of an external compliance provider check."""

    SUCCESS = "success"
    FAILED = "failed"
    PENDING = "pending"
    UNAVAILABLE = "unavailable"


class SanctionStatus(str, Enum):
    """Overall sanction status based on provider checks."""

    CLEAN = "clean"
    WATCHLISTED = "watchlisted"
    SANCTIONED = "sanctioned"
    HIGH_RISK = "high_risk"
    UNKNOWN = "unknown"


class ComplianceFlag(BaseModel):
    """A specific flag raised by a compliance provider."""

    flag_name: str = Field(description="Name of the flag (e.g., 'OFAC_sanctioned', 'high_intensity_gambling').")
    category: str = Field(description="Category of the flag (e.g., 'sanctions', 'AML', 'fraud').")
    value: str = Field(description="Value or specific detail of the flag.")
    severity: float = Field(ge=0.0, le=1.0, description="Severity of the flag (0.0 to 1.0, 1.0 being most severe).")

    model_config = {
        "json_schema_extra": {
            "examples": [
                {"flag_name": "OFAC_SDN_List", "category": "Sanctions", "value": "Match (John Doe)", "severity": 1.0},
                {"flag_name": "Suspicious_Transaction_Pattern", "category": "AML", "value": "Layering", "severity": 0.7}
            ]
        }
    }


class ExternalProviderResult(BaseModel):
    """Result from a single external compliance provider."""

    provider_name: str = Field(description="Name of the external provider (e.g., 'Chainalysis', 'TRM Labs').")
    status: ProviderStatus = Field(description="Status of the check with this provider.")
    score: Optional[float] = Field(
        None, ge=0.0, le=1.0, description="Reputation/risk score from this provider."
    )
    flags: List[ComplianceFlag] = Field(default_factory=list, description="Specific flags raised by this provider.")
    raw_response: Optional[Dict] = Field(
        None, description="Original raw response from the provider for detailed debugging/auditing."
    )
    message: Optional[str] = Field(None, description="Any specific message from the provider.")


class SherlockValidationInput(BaseModel):
    """Input for Sherlock's reputational validation."""

    entity_id: str = Field(description="The unique identifier for the entity (e.g., wallet address, user ID, business EIN).")
    entity_type: str = Field(description="The type of entity (e.g., 'wallet_address', 'email', 'organization', 'person').")

    model_config = {
        "json_schema_extra": {
            "examples": [
                {"entity_id": "addr_123abc...", "entity_type": "wallet_address"},
                {"entity_id": "john.doe@example.com", "entity_type": "email"}
            ]
        }
    }


class SherlockValidationResult(MongoBaseModel):
    """Comprehensive reputational validation result by Sherlock."""

    entity_id: str = Field(description="The unique identifier for the entity that was validated.")
    entity_type: str = Field(description="The type of entity validated.")
    overall_sanction_status: SanctionStatus = Field(description="Overall determination of sanction/blacklist status.")
    overall_risk_score: float = Field(
        ge=0.0,
        le=1.0,
        description="Aggregated risk score from all providers (0.0=low risk, 1.0=high risk).",
    )
    provider_results: List[ExternalProviderResult] = Field(default_factory=list, description="Results from individual external providers.")
    sherlock_flags: List[ComplianceFlag] = Field(
        default_factory=list, description="Internal flags generated by Sherlock's aggregation logic."
    )
    suggested_action: Optional[str] = Field(
        None, description="Suggested action based on the validation (e.g., 'proceed', 'review_manual', 'block')."
    )
